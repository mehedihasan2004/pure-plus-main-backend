generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum EDepartment {
  ACCIDENT_AND_EMERGENCY
  ANAESTHESIA
  CANCER_CARE
  CARDIOLOGY_CARE
  CARDIOTHORACIC_AND_VASCULAR_SURGERY
  CARDIOTHORACIC_ANAESTHESIA
  CHILD_DEVELOPMENT
  COUNSELLING
  CRITICAL_CARE
  DENTAL_AND_MAXILLOFACIAL_SURGERY
  DERMATOLOGY_AND_VENEREOLOGY
  DIAGONSTIC_AND_INTERVENTIONAL_RADIOLOGY
  DIETETICS_AND_NUTRITION
  ENDOCRINOLOGY_AND_DIABETOLOGY
  ENT
  FERTILITY
  GASTROENTEROLOGY_AND_HEPATOLOGY
  GENERAL_AND_LAPAROSCOPIC_SURGERY
  HAEMATOLOGY_AND_STEM_CELL_TRANSPLANT
  INTERNAL_MEDICINE
  JOINT_CARE_AND_WELLNESS
  KINNEY_TRANSPLANT_PROGRAM
  LAB_MEDICINE
  LITHOTRIPSY
  NEONATOLOGY
  NEPHROLORY
  NEUROLOGY
  NEUROSURGERY
  NUCLEAR_MEDICINA
  OBSTETRICS_AND_GYNAECOLOGY
  OPTHALMOLOGY
  ORTHOPAEDICS
  PAEDIATRIC_CARDIOLOGY
  PAEDIATRIC_SURGERY_AND_PAEDICATRIC_UROLOGY
  PAEDIATRICS
  PHYSICAL_MEDICINE_AND_REHABILITATION
  PLASTIC_COMMMA_RECONSTRUCTIVE_AND_COSMETIC_SURGERY
  PSYCHIATRY
  RESPIRATORY_MEDICINE
  RHEUMATOLOGY
  TRANSFUSION_MEDICINE
  UROLOGY
}

enum EGender {
  MALE
  FEMALE
  OTHERS
}

enum ERank {
  MEDICAL_STUDENT
  INTERN
  RESIDENT
  SENIOR_RESIDENT
  CHIEF_RESIDENT
  FELLOW
  ATTENDING_PHYSICIAN
  CONSULTANT
  SPECIALIST
  REGISTRAR
  SENIOR_REGISTRAR
  CONSULTANT_SURGEON
  CONSULTANT_PHYSICIAN
  JUNIOR_CONSULTANT
  SENIOR_CONSULTANT
  MEDICAL_DIRECTOR
  CHIEF_OF_MEDICINE
  PROFESSOR
  CLINICAL_PROFESSOR
  ASSISTANT_PROFESSOR
  ASSOCIATE_PROFESSOR
  CHAIRMAN
}

enum EAppointmentStatus {
  SCHEDULED
  CONFIRMED
  CANCELLED
  RESCHEDULED
  CHECKED_IN
  IN_PROGRESS
  COMPLETED
  NO_SHOW
  PENDING
}

enum EPaymentStatus {
  NOT_PAID
  PENDING
  PAID
  PARTIALLY_PAID
  FAILED
  REFUNDED
  CANCELLED
  UNDER_REVIEW
}

enum ERole {
  PATIENT
  DOCTOR
  ADMIN
  SUPER_ADMIN
}

model User {
  id          String   @id
  name        String
  phone       String?  @unique
  email       String   @unique
  gender      EGender
  image       String?
  role        ERole    @default(PATIENT)
  dateOfBirth DateTime

  patient    Patient?
  doctor     Doctor?
  admin      Admin?
  superAdmin SuperAdmin?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("users")
}

model Patient {
  address                String? @db.Text
  emergencyContactNumber String?

  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  appointments Appointment[]
  testimonials Testimonial[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("patients")
}

model Doctor {
  department     EDepartment
  rank           ERank
  qualifications String      @db.Text
  description    String?     @db.Text

  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  appointments Appointment[]
  testimonials Testimonial[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("doctors")
}

model Admin {
  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("admins")
}

model SuperAdmin {
  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("super_admins")
}

model Appointment {
  id String @id @default(cuid())

  department    EDepartment
  date          DateTime
  time          String
  status        EAppointmentStatus
  paymentStatus EPaymentStatus     @default(NOT_PAID)
  prescription  String?
  followUpDate  DateTime?

  doctorId  String
  doctor    Doctor  @relation(fields: [doctorId], references: [userId])
  patientId String
  patient   Patient @relation(fields: [patientId], references: [userId])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("appointments")
}

model Testimonial {
  id String @id @default(cuid())

  comment String @db.Text
  rating  Int?

  doctorId  String
  doctor    Doctor  @relation(fields: [doctorId], references: [userId], onDelete: Cascade)
  patientId String
  patient   Patient @relation(fields: [patientId], references: [userId], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("testimonials")
}
